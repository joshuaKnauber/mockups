{"version":3,"sources":["components/models/Mesh.js","components/models/BaseModel.js","components/models/phone.gltf","components/models/Home Screen.png","components/models/Phone.js","components/scene/MockupScene.js","components/scene/Scene.js","App.js","reportWebVitals.js","index.js"],"names":["MockupMesh","color","metalness","roughness","img","geometry","selected","setSelected","matRef","useRef","imgInpRef","colorInpRef","metalnessInpRef","roughnessInpRef","useState","imgUrl","setImgUrl","hovering","setHovering","updateImageUrl","evt","a","file","target","files","type","arrayBuffer","buffer","blob","Blob","urlCreator","window","URL","webkitURL","imageUrl","createObjectURL","useEffect","document","body","classList","add","remove","uuid","current","r","g","b","value","rgbToHex","Math","round","checked","Boolean","TextureLoader","load","tex","flipY","encoding","THREE","map","needsUpdate","onPointerOver","onPointerOut","onClick","castShadow","receiveShadow","ref","emissive","emissiveIntensity","Html","position","boundingBox","max","className","onChange","set","hexToRgb","min","step","size","hex","replace","m","result","exec","parseInt","toString","slice","BaseModel","props","selectedUid","setSelectedUid","dispose","children","meshData","undefined","mat","material","Phone","useGLTF","PhoneModel","nodes","materials","Plane001","Plane002","Plane014","Plane014_1","Circle001_1","Circle001_2","Circle001","Circle003","Circle002","Plane004","Circle008","Circle008_1","Cobre","Plane005","Plane006","Plane007","Plane011","Plane011_1","Plane011_2","Pantalla","TestImg","Plane011_3","Plane011_4","preload","MockupScene","groundShadows","objectShadows","doDownload","setDoDownload","width","height","useFrame","state","gl","domElement","toDataURL","link","createElement","href","download","click","downloadImage","Stage","contactShadow","shadows","adjustCamera","intensity","environment","preset","Scene","setGroundShadows","setObjectShadows","fov","setFov","orbitEnabled","setOrbitEnabled","hasAlpha","setHasAlpha","setColor","cameraPosOverwrite","setCameraPosOverwrite","widthInpRef","heightInpRef","canvasRef","cameraRef","setBackgroundColor","getElementsByClassName","style","backgroundColor","setCameraSize","elem","xScale","innerWidth","yScale","innerHeight","scale","transform","addEventListener","removeEventListener","bottom-tooltip","opacity","fallback","colorManagement","shadowMap","preserveDrawingBuffer","OrbitControls","makeDefault","enabled","PerspectiveCamera","near","far","attach","args","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5cbf540d.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport { TextureLoader } from 'three'\r\nimport { Html } from '@react-three/drei'\r\nimport * as THREE from \"three\";\r\nimport { FaCheck } from 'react-icons/fa';\r\n\r\nimport { hexToRgb, rgbToHex } from './BaseModel';\r\n\r\nimport \"./Popup.css\";\r\n\r\n\r\nexport default function MockupMesh ({ color=\"white\", metalness=0, roughness=0.2, img=null, geometry=null, selected, setSelected }) {\r\n\r\n  const matRef = useRef()\r\n  const imgInpRef = useRef()\r\n  const colorInpRef = useRef()\r\n  const metalnessInpRef = useRef()\r\n  const roughnessInpRef = useRef()\r\n\r\n  const [imgUrl, setImgUrl] = useState(img)\r\n  const [hovering, setHovering] = useState(false)\r\n\r\n\r\n  const setMeshColor = () => { matRef.current.color.set( hexToRgb(colorInpRef.current.value) ) }\r\n  const setMeshMetalness = () => { matRef.current.metalness = metalnessInpRef.current.checked ? 1 : 0 }\r\n  const setMeshRoughness = () => { matRef.current.roughness = roughnessInpRef.current.value }\r\n\r\n\r\n  const updateImageUrl = async (evt) => {\r\n    const file = evt.target.files[0]\r\n    const { type } = file\r\n    const buffer = await file.arrayBuffer()\r\n    const blob = new Blob([buffer], { type })\r\n    const urlCreator = window.URL || window.webkitURL\r\n    const imageUrl = urlCreator.createObjectURL(blob)\r\n    setImgUrl(imageUrl)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (hovering) { document.body.classList.add(\"pointing\") }\r\n    else { document.body.classList.remove(\"pointing\") }\r\n  }, [hovering])\r\n\r\n\r\n  useEffect(() => {\r\n    if (selected === geometry.uuid) {\r\n      let { r, g, b } = matRef.current.color\r\n      colorInpRef.current.value = rgbToHex(Math.round(r*255), Math.round(g*255), Math.round(b*255))\r\n      metalnessInpRef.current.checked = Boolean(matRef.current.metalness)\r\n      roughnessInpRef.current.value = matRef.current.roughness\r\n    }\r\n  }, [selected])\r\n\r\n\r\n  useEffect(() => {\r\n    if (imgUrl) {\r\n      const textureLoader = new TextureLoader()\r\n      textureLoader.load(imgUrl, (tex) => {\r\n        tex.flipY = false\r\n        tex.encoding = THREE.sRGBEncoding\r\n        matRef.current.map = tex\r\n        matRef.current.needsUpdate = true\r\n      })\r\n    }\r\n  }, [imgUrl])\r\n\r\n  return (\r\n    <>\r\n    <group>\r\n      <mesh\r\n        onPointerOver={()=>setHovering(true)}\r\n        onPointerOut={()=>setHovering(false)}\r\n        onClick={()=>setSelected(geometry.uuid)}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={geometry}\r\n      >\r\n        <meshStandardMaterial\r\n          ref={matRef}\r\n          color={color}\r\n          metalness={metalness}\r\n          roughness={roughness}\r\n          emissive={hovering ? \"orange\" : \"white\"}\r\n          emissiveIntensity={hovering ? 5 : 0}\r\n        />\r\n      </mesh>\r\n\r\n      {selected === geometry.uuid && <Html position={geometry.boundingBox.max}>\r\n        <div className=\"materialPopup\">\r\n          <p>Color</p>\r\n          <input type=\"color\" ref={colorInpRef} onChange={setMeshColor} />\r\n          {img && <>\r\n            <p>Image</p>\r\n            <input type=\"file\" ref={imgInpRef} onChange={updateImageUrl} />\r\n          </>}\r\n          <p>Metal</p>\r\n          <input type=\"checkbox\" ref={metalnessInpRef} onChange={setMeshMetalness} />\r\n          <p>Roughness</p>\r\n          <input type=\"range\" ref={roughnessInpRef} min=\"0\" max=\"1\" step={0.01} onChange={setMeshRoughness} />\r\n          <button className=\"popupConfirm\" onClick={()=>setSelected(null)}><FaCheck size={16} color=\"limegreen\"/></button>\r\n        </div>\r\n      </Html>}\r\n\r\n    </group>\r\n    </>\r\n  )\r\n}","import React, { useState } from 'react'\r\n\r\nimport MockupMesh from './Mesh';\r\n\r\n\r\nexport const hexToRgb = (hex) => {\r\n  // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n    return r + r + g + g + b + b;\r\n  });\r\n\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})`\r\n}\r\n\r\n\r\nexport function rgbToHex(r, g, b) {\r\n  return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n}\r\n\r\n\r\nexport default function BaseModel(props) {\r\n    \r\n  const [selectedUid, setSelectedUid] = useState(null)\r\n\r\n  return (\r\n    <group {...props} dispose={null} >\r\n      {props.children.map(meshData => {\r\n        if (meshData.props.geometry === undefined) return\r\n        const mat = meshData.props.material\r\n        return <MockupMesh\r\n                  key={meshData.props.geometry.uuid}\r\n                  geometry={meshData.props.geometry}\r\n                  color={rgbToHex(Math.round(mat.color.r*255), Math.round(mat.color.g*255), Math.round(mat.color.b*255))}\r\n                  metalness={mat.metalness}\r\n                  roughness={mat.roughness}\r\n                  img={meshData.props.img}\r\n                  selected={selectedUid}\r\n                  setSelected={setSelectedUid}\r\n                />\r\n      })}\r\n    </group>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/phone.d08364ea.gltf\";","export default __webpack_public_path__ + \"static/media/Home Screen.67e27939.png\";","import React from 'react'\r\nimport { useGLTF } from '@react-three/drei'\r\nimport BaseModel from './BaseModel'\r\n\r\nimport PhoneModel from './phone.gltf'\r\nimport TestImg from './Home Screen.png'\r\n\r\nexport default function Phone(props) {\r\n\r\n  const { nodes, materials } = useGLTF(PhoneModel)\r\n\r\n  return (\r\n    <BaseModel {...props} >\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane001.geometry}\r\n        material={nodes.Plane001.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane002.geometry}\r\n        material={nodes.Plane002.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane014.geometry}\r\n        material={nodes.Plane014.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane014_1.geometry}\r\n        material={nodes.Plane014_1.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Circle001_1.geometry}\r\n        material={nodes.Circle001_1.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Circle001_2.geometry}\r\n        material={nodes.Circle001_2.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Circle001.geometry}\r\n        material={nodes.Circle001.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Circle003.geometry}\r\n        material={materials['Luz Led']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Circle002.geometry}\r\n        material={nodes.Circle002.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane004.geometry}\r\n        material={nodes.Plane004.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Circle008.geometry}\r\n        material={materials['Metal Ceramico']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Circle008_1.geometry}\r\n        material={materials.Cobre}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane005.geometry}\r\n        material={nodes.Plane005.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane006.geometry}\r\n        material={nodes.Plane006.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane007.geometry}\r\n        material={nodes.Plane007.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane011.geometry}\r\n        material={nodes.Plane011.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane011_1.geometry}\r\n        material={nodes.Plane011_1.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane011_2.geometry}\r\n        material={materials.Pantalla}\r\n        img={TestImg}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane011_3.geometry}\r\n        material={nodes.Plane011_3.material}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Plane011_4.geometry}\r\n        material={materials['Bandas magneticas']}\r\n      />\r\n    </BaseModel>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(PhoneModel)","import React from 'react'\r\n\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { Stage } from '@react-three/drei'\r\n\r\nimport Phone from '../models/Phone'\r\n\r\n\r\nfunction MockupScene({ groundShadows, objectShadows, doDownload, setDoDownload, width, height }) {\r\n\r\n  const downloadImage = (state) => {\r\n    if (!doDownload) return\r\n    \r\n    const img = state.gl.domElement.toDataURL()\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = img;\r\n    link.download = `mockup_${width}x${height}.png`;\r\n    link.click();\r\n\r\n    setDoDownload(false)\r\n  }\r\n\r\n  useFrame((state) => downloadImage(state))\r\n\r\n  return (\r\n    <scene>\r\n        <Stage contactShadow={groundShadows} shadows={objectShadows} adjustCamera intensity={1} environment=\"sunset\" preset=\"rembrandt\" >\r\n\r\n          <Phone />\r\n\r\n        </Stage>\r\n    </scene>\r\n  );\r\n}\r\n\r\n\r\nexport default MockupScene;","import React, { useState, useRef, useEffect, Suspense } from 'react'\r\n\r\nimport { Canvas } from '@react-three/fiber'\r\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei'\r\n\r\nimport { FaCamera, FaTint, FaCube, FaCubes, FaCompass } from 'react-icons/fa';\r\n\r\nimport './Scene.css';\r\nimport MockupScene from './MockupScene';\r\n\r\n\r\nfunction Scene() {\r\n\r\n  const [doDownload, setDoDownload] = useState(false)\r\n\r\n  // VIEW SETTINGS\r\n  const [groundShadows, setGroundShadows] = useState(true)\r\n  const [objectShadows, setObjectShadows] = useState(true)\r\n\r\n  const [fov, setFov] = useState(0)\r\n\r\n  const [orbitEnabled, setOrbitEnabled] = useState(true)\r\n\r\n  const [hasAlpha, setHasAlpha] = useState(false)\r\n  const [color, setColor] = useState(\"\")\r\n\r\n  const [cameraPosOverwrite, setCameraPosOverwrite] = useState([0, 0, 0])\r\n  \r\n  const colorInpRef = useRef()\r\n  const widthInpRef = useRef()\r\n  const heightInpRef = useRef()\r\n\r\n  const canvasRef = useRef()\r\n  const cameraRef = useRef()\r\n  \r\n  const setBackgroundColor = () => {\r\n    document.getElementsByClassName(\"App\")[0].style.backgroundColor = colorInpRef.current.value\r\n    setColor(colorInpRef.current.value)\r\n    setHasAlpha(false)\r\n  }\r\n\r\n  const setCameraSize = () => {\r\n    const width = Math.max(1, widthInpRef.current.value)\r\n    const height = Math.max(1, heightInpRef.current.value)\r\n\r\n    const elem = document.getElementsByClassName(\"canvasContainer\")[0]\r\n    elem.style.width = `${width}px`\r\n    elem.style.height = `${height}px`\r\n    \r\n    const xScale = window.innerWidth / width\r\n    const yScale = window.innerHeight / height\r\n    let scale = Math.min(xScale, yScale)\r\n    scale = scale<1 ? scale-0.02 : 1\r\n\r\n    canvasRef.current.style.transform = `scale(${scale})`\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (hasAlpha) {\r\n      document.getElementsByClassName(\"App\")[0].classList.add(\"alpha\")\r\n      canvasRef.current.classList.add(\"alpha\")\r\n    } else {\r\n      document.getElementsByClassName(\"App\")[0].classList.remove(\"alpha\")\r\n      canvasRef.current.classList.remove(\"alpha\")\r\n    }\r\n  }, [hasAlpha])\r\n\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", setCameraSize)\r\n\r\n    // set default camera size\r\n    widthInpRef.current.value = window.innerWidth-20\r\n    heightInpRef.current.value = window.innerHeight-20\r\n    setCameraSize()\r\n\r\n    // set default fov\r\n    setFov(20)\r\n\r\n    // set default background color\r\n    colorInpRef.current.value = \"#F5DDC7\"\r\n    setBackgroundColor()\r\n\r\n    // set alpha default\r\n    setHasAlpha(false)\r\n\r\n    setCameraPosOverwrite([0,10,0])\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", setCameraSize)\r\n    }\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"sceneContainer\">\r\n\r\n      <div className=\"viewBtnsContainer\">\r\n\r\n        <button className=\"iconToggle\" onClick={() => setGroundShadows(!groundShadows)} bottom-tooltip=\"Ground Shadows\"><FaCube color=\"white\" size={17} style={{opacity:groundShadows?1:0.5}} /></button>\r\n        <button className=\"iconToggle\" onClick={() => setObjectShadows(!objectShadows)} bottom-tooltip=\"Object Shadows\"><FaCubes color=\"white\" size={17} style={{opacity:objectShadows?1:0.5}} /></button>\r\n        <div className=\"divider\"></div>\r\n        <button className=\"iconToggle\" onClick={() => setHasAlpha(!hasAlpha)} bottom-tooltip=\"Background\"><FaTint color=\"white\" size={17} style={{opacity:!hasAlpha?1:0.5}} /></button>\r\n        <input type=\"color\" onChange={setBackgroundColor} ref={colorInpRef} style={{backgroundColor: colorInpRef.current?.value}}></input>\r\n        <div className=\"divider\"></div>\r\n        <input type=\"number\" onChange={setCameraSize} ref={widthInpRef} />\r\n        <input type=\"number\" onChange={setCameraSize} ref={heightInpRef} />\r\n        <div className=\"divider\"></div>\r\n        <input type=\"range\" value={fov} min=\"10\" max=\"60\" step={1} onChange={(evt) => setFov(evt.target.value)} className=\"fovInp\" />\r\n        <button className=\"iconToggle\" onClick={() => setOrbitEnabled(!orbitEnabled)} bottom-tooltip=\"Orbit\"><FaCompass color=\"white\" size={17} style={{opacity:orbitEnabled?1:0.5}} /></button>\r\n      </div>\r\n\r\n      <button className=\"downloadBtn\" onClick={() => setDoDownload(true)}><FaCamera size={16} color=\"white\"/></button>\r\n\r\n      <div className=\"canvasContainer\">\r\n        <Suspense fallback={null}>\r\n          <Canvas colorManagement shadowMap shadows ref={canvasRef} gl={{ preserveDrawingBuffer: true }} >\r\n            <OrbitControls makeDefault enabled={orbitEnabled} />\r\n            <PerspectiveCamera makeDefault ref={cameraRef} fov={fov} near={0.0001} far={50} position={cameraPosOverwrite} />\r\n\r\n            <MockupScene\r\n              groundShadows={groundShadows}\r\n              objectShadows={objectShadows}\r\n              doDownload={doDownload}\r\n              setDoDownload={setDoDownload}\r\n              width={widthInpRef.current ? widthInpRef.current.value : 0}\r\n              height={heightInpRef.current ? heightInpRef.current.value : 0}\r\n            />\r\n\r\n            {!hasAlpha && <color attach=\"background\" args={[color]} />}\r\n\r\n          </Canvas>\r\n        </Suspense>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Scene;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Scene from './components/scene/Scene';\n\nfunction App () {\n\n  return (\n    <div className=\"App\">\n      \n      <Scene />\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}