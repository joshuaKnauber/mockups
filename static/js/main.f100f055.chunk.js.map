{"version":3,"sources":["components/models/Mesh.js","components/models/BaseModel.js","components/models/phone.gltf","components/models/Phone.js","components/scene/MockupScene.js","components/scene/Scene.js","App.js","reportWebVitals.js","index.js"],"names":["MockupMesh","color","metalness","roughness","img","geometry","selectable","selected","setSelected","matRef","useRef","imgInpRef","colorInpRef","metalnessInpRef","roughnessInpRef","useState","imgUrl","setImgUrl","hovering","setHovering","updateImageUrl","evt","a","file","target","files","type","arrayBuffer","buffer","blob","Blob","urlCreator","window","URL","webkitURL","imageUrl","createObjectURL","useEffect","document","body","classList","add","remove","uuid","current","r","g","b","value","rgbToHex","Math","round","checked","Boolean","TextureLoader","load","tex","flipY","encoding","THREE","map","needsUpdate","anisotropy","onPointerOver","stopPropagation","onPointerLeave","onClick","castShadow","receiveShadow","ref","side","emissive","emissiveIntensity","Html","position","boundingBox","max","className","onChange","set","hexToRgb","min","step","size","hex","replace","m","result","exec","parseInt","componentToHex","c","toString","length","BaseModel","props","selectedUid","setSelectedUid","dispose","children","meshData","undefined","mat","material","name","includes","Phone","useGLTF","PhoneModel","nodes","materials","Buttons","Flash","Bezel","Body","Lenses","Screen","preload","MockupScene","groundShadows","objectShadows","doDownload","setDoDownload","width","height","isCamSet","setIsCamSet","useFrame","state","gl","domElement","toDataURL","link","createElement","href","download","click","downloadImage","camera","Stage","contactShadow","shadows","adjustCamera","intensity","environment","preset","Scene","setGroundShadows","setObjectShadows","fov","setFov","orbitEnabled","setOrbitEnabled","hasAlpha","setHasAlpha","setColor","widthInpRef","heightInpRef","canvasRef","cameraRef","setBackgroundColor","getElementsByClassName","style","backgroundColor","setCameraSize","elem","xScale","innerWidth","yScale","innerHeight","scale","transform","addEventListener","removeEventListener","bottom-tooltip","opacity","fallback","colorManagement","shadowMap","preserveDrawingBuffer","OrbitControls","makeDefault","enabled","PerspectiveCamera","near","far","attach","args","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f100f055.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport { TextureLoader } from 'three'\r\nimport { Html } from '@react-three/drei'\r\nimport * as THREE from \"three\";\r\nimport { FaCheck } from 'react-icons/fa';\r\n\r\nimport { hexToRgb, rgbToHex } from './BaseModel';\r\n\r\nimport \"./Popup.css\";\r\n\r\n\r\nexport default function MockupMesh ({ color=\"white\", metalness=0, roughness=0.2, img=null, geometry=null, selectable=true, selected, setSelected }) {\r\n\r\n  const matRef = useRef()\r\n  const imgInpRef = useRef()\r\n  const colorInpRef = useRef()\r\n  const metalnessInpRef = useRef()\r\n  const roughnessInpRef = useRef()\r\n\r\n  const [imgUrl, setImgUrl] = useState(img)\r\n  const [hovering, setHovering] = useState(false)\r\n\r\n\r\n  const setMeshColor = () => { matRef.current.color.set( hexToRgb(colorInpRef.current.value) ) }\r\n  const setMeshMetalness = () => { matRef.current.metalness = metalnessInpRef.current.checked ? 1 : 0 }\r\n  const setMeshRoughness = () => { matRef.current.roughness = roughnessInpRef.current.value }\r\n\r\n\r\n  const updateImageUrl = async (evt) => {\r\n    const file = evt.target.files[0]\r\n    const { type } = file\r\n    const buffer = await file.arrayBuffer()\r\n    const blob = new Blob([buffer], { type })\r\n    const urlCreator = window.URL || window.webkitURL\r\n    const imageUrl = urlCreator.createObjectURL(blob)\r\n    setImgUrl(imageUrl)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (hovering) { document.body.classList.add(\"pointing\") }\r\n    else { document.body.classList.remove(\"pointing\") }\r\n  }, [hovering])\r\n\r\n\r\n  useEffect(() => {\r\n    if (selected === geometry.uuid) {\r\n      let { r, g, b } = matRef.current.color\r\n      colorInpRef.current.value = rgbToHex(Math.round(r*255), Math.round(g*255), Math.round(b*255))\r\n      metalnessInpRef.current.checked = Boolean(matRef.current.metalness)\r\n      roughnessInpRef.current.value = matRef.current.roughness\r\n    }\r\n  }, [selected])\r\n\r\n\r\n  useEffect(() => {\r\n    if (imgUrl) {\r\n      if (typeof(imgUrl) === typeof(\"\")) {\r\n          const textureLoader = new TextureLoader()\r\n          textureLoader.load(imgUrl, (tex) => {\r\n            tex.flipY = false\r\n            tex.encoding = THREE.sRGBEncoding\r\n            matRef.current.map = tex\r\n            matRef.current.needsUpdate = true\r\n          })\r\n      }\r\n      else {\r\n        imgUrl.anisotropy = 32\r\n        matRef.current.map = imgUrl\r\n      }\r\n    }\r\n  }, [imgUrl])\r\n\r\n  return (\r\n    <>\r\n    <group>\r\n      <mesh\r\n        onPointerOver={(evt)=>{\r\n          if (selectable) {\r\n            setHovering(true)\r\n            evt.stopPropagation()\r\n          }\r\n        }}\r\n        onPointerLeave={(evt)=>{\r\n          if (selectable) {\r\n            setHovering(false)\r\n            evt.stopPropagation()\r\n          }\r\n        }}\r\n        onClick={(evt)=>{\r\n          selectable && setSelected(geometry.uuid)\r\n          evt.stopPropagation()\r\n        }}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={geometry}\r\n      >\r\n        <meshStandardMaterial\r\n          ref={matRef}\r\n          color={color}\r\n          side={THREE.DoubleSide}\r\n          metalness={metalness}\r\n          roughness={roughness}\r\n          emissive={hovering ? \"orange\" : \"white\"}\r\n          emissiveIntensity={hovering ? 5 : 0}\r\n        />\r\n      </mesh>\r\n\r\n      {selected === geometry.uuid && <Html position={geometry.boundingBox.max}>\r\n        <div className=\"materialPopup\">\r\n          <p>Color</p>\r\n          <input type=\"color\" ref={colorInpRef} onChange={setMeshColor} />\r\n          {img && <>\r\n            <p>Image</p>\r\n            <input type=\"file\" ref={imgInpRef} onChange={updateImageUrl} />\r\n          </>}\r\n          <p>Metal</p>\r\n          <input type=\"checkbox\" ref={metalnessInpRef} onChange={setMeshMetalness} />\r\n          <p>Roughness</p>\r\n          <input type=\"range\" ref={roughnessInpRef} min=\"0\" max=\"1\" step={0.01} onChange={setMeshRoughness} />\r\n          <button className=\"popupConfirm\" onClick={()=>setSelected(null)}><FaCheck size={16} color=\"limegreen\"/></button>\r\n        </div>\r\n      </Html>}\r\n\r\n    </group>\r\n    </>\r\n  )\r\n}","import React, { useState } from 'react'\r\n\r\nimport MockupMesh from './Mesh';\r\n\r\n\r\nexport const hexToRgb = (hex) => {\r\n  // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  hex = hex.replace(shorthandRegex, function(m, r, g, b) {\r\n    return r + r + g + g + b + b;\r\n  });\r\n\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})`\r\n}\r\n\r\nfunction componentToHex(c) {\r\n  var hex = c.toString(16);\r\n  return hex.length == 1 ? \"0\" + hex : hex;\r\n}\r\n\r\nexport function rgbToHex(r, g, b) {\r\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\n\r\nexport default function BaseModel(props) {\r\n    \r\n  const [selectedUid, setSelectedUid] = useState(null)\r\n\r\n  return (\r\n    <group {...props} dispose={null} >\r\n      {props.children.map(meshData => {\r\n        if (meshData.props.geometry === undefined) return\r\n\r\n        const mat = meshData.props.material\r\n        return <MockupMesh\r\n                  key={meshData.props.geometry.uuid}\r\n                  geometry={meshData.props.geometry}\r\n                  color={rgbToHex(Math.round(mat.color.r*255), Math.round(mat.color.g*255), Math.round(mat.color.b*255))}\r\n                  metalness={mat.metalness}\r\n                  roughness={mat.roughness}\r\n                  img={mat.map}\r\n                  selectable={mat.name.includes(\".editable\")}\r\n                  selected={selectedUid}\r\n                  setSelected={setSelectedUid}\r\n                />\r\n      })}\r\n    </group>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/phone.48b23579.gltf\";","import React from 'react'\r\nimport { useGLTF } from '@react-three/drei'\r\nimport BaseModel from './BaseModel'\r\n\r\nimport PhoneModel from './phone.gltf'\r\n\r\nexport default function Phone(props) {\r\n\r\n  const { nodes, materials } = useGLTF(PhoneModel)\r\n\r\n  return (\r\n    <BaseModel {...props} >\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Buttons.geometry}\r\n        material={materials['Buttons.editable']}\r\n      />\r\n      <mesh castShadow receiveShadow geometry={nodes.Flash.geometry} material={materials.Flash} />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Bezel.geometry}\r\n        material={materials['Bezel.editable']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Body.geometry}\r\n        material={materials['Body.editable']}\r\n      />\r\n      <mesh castShadow receiveShadow geometry={nodes.Lenses.geometry} material={materials.Lenses} />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Screen.geometry}\r\n        material={materials['Screen.editable']}\r\n      />\r\n    </BaseModel>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(PhoneModel)","import React, { useState } from 'react'\r\n\r\nimport { useFrame, useThree } from '@react-three/fiber'\r\nimport { Stage } from '@react-three/drei'\r\n\r\nimport Phone from '../models/Phone'\r\n\r\n\r\nfunction MockupScene({ groundShadows, objectShadows, doDownload, setDoDownload, width, height }) {\r\n\r\n  const [isCamSet, setIsCamSet] = useState(false)\r\n\r\n  const downloadImage = (state) => {\r\n    if (!doDownload) return\r\n    \r\n    const img = state.gl.domElement.toDataURL()\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.href = img;\r\n    link.download = `mockup_${width}x${height}.png`;\r\n    link.click();\r\n\r\n    setDoDownload(false)\r\n  }\r\n\r\n  useFrame((state) => downloadImage(state))\r\n\r\n  useFrame(({camera}) => {\r\n    if (isCamSet) return\r\n    camera.position.set(-0.25, 0.25, 0.7)\r\n    setIsCamSet(true)\r\n  })\r\n\r\n  return (\r\n    <scene>\r\n        <Stage contactShadow={groundShadows} shadows={objectShadows} adjustCamera intensity={1} environment=\"sunset\" preset=\"rembrandt\" >\r\n\r\n          <Phone />\r\n\r\n        </Stage>\r\n    </scene>\r\n  );\r\n}\r\n\r\n\r\nexport default MockupScene;","import React, { useState, useRef, useEffect, Suspense } from 'react'\r\n\r\nimport { Canvas } from '@react-three/fiber'\r\nimport { OrbitControls, PerspectiveCamera } from '@react-three/drei'\r\n\r\nimport { FaCamera, FaTint, FaCube, FaCubes, FaCompass } from 'react-icons/fa';\r\n\r\nimport './Scene.css';\r\nimport MockupScene from './MockupScene';\r\n\r\n\r\nfunction Scene() {\r\n\r\n  const [doDownload, setDoDownload] = useState(false)\r\n\r\n  // VIEW SETTINGS\r\n  const [groundShadows, setGroundShadows] = useState(true)\r\n  const [objectShadows, setObjectShadows] = useState(true)\r\n\r\n  const [fov, setFov] = useState(0)\r\n\r\n  const [orbitEnabled, setOrbitEnabled] = useState(true)\r\n\r\n  const [hasAlpha, setHasAlpha] = useState(false)\r\n  const [color, setColor] = useState(\"\")\r\n  \r\n  const colorInpRef = useRef()\r\n  const widthInpRef = useRef()\r\n  const heightInpRef = useRef()\r\n\r\n  const canvasRef = useRef()\r\n  const cameraRef = useRef()\r\n  \r\n  const setBackgroundColor = () => {\r\n    document.getElementsByClassName(\"App\")[0].style.backgroundColor = colorInpRef.current.value\r\n    setColor(colorInpRef.current.value)\r\n    setHasAlpha(false)\r\n  }\r\n\r\n  const setCameraSize = () => {\r\n    const width = Math.max(1, widthInpRef.current.value)\r\n    const height = Math.max(1, heightInpRef.current.value)\r\n\r\n    const elem = document.getElementsByClassName(\"canvasContainer\")[0]\r\n    elem.style.width = `${width}px`\r\n    elem.style.height = `${height}px`\r\n    \r\n    const xScale = window.innerWidth / width\r\n    const yScale = window.innerHeight / height\r\n    let scale = Math.min(xScale, yScale)\r\n    scale = scale<1 ? scale-0.02 : 1\r\n\r\n    canvasRef.current.style.transform = `scale(${scale})`\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (hasAlpha) {\r\n      document.getElementsByClassName(\"App\")[0].classList.add(\"alpha\")\r\n      canvasRef.current.classList.add(\"alpha\")\r\n    } else {\r\n      document.getElementsByClassName(\"App\")[0].classList.remove(\"alpha\")\r\n      canvasRef.current.classList.remove(\"alpha\")\r\n    }\r\n  }, [hasAlpha])\r\n\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", setCameraSize)\r\n\r\n    // set default camera size\r\n    widthInpRef.current.value = window.innerWidth-20\r\n    heightInpRef.current.value = window.innerHeight-20\r\n    \r\n    // set default fov\r\n    setFov(20)\r\n    \r\n    // set default background color\r\n    colorInpRef.current.value = \"#8A4CE6\"\r\n    setBackgroundColor()\r\n    \r\n    // set alpha default\r\n    setHasAlpha(false)\r\n    \r\n    setCameraSize()\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", setCameraSize)\r\n    }\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"sceneContainer\">\r\n\r\n      <div className=\"viewBtnsContainer\">\r\n\r\n        <button className=\"iconToggle\" onClick={() => setGroundShadows(!groundShadows)} bottom-tooltip=\"Ground Shadows\"><FaCube color=\"white\" size={17} style={{opacity:groundShadows?1:0.5}} /></button>\r\n        <button className=\"iconToggle\" onClick={() => setObjectShadows(!objectShadows)} bottom-tooltip=\"Object Shadows\"><FaCubes color=\"white\" size={17} style={{opacity:objectShadows?1:0.5}} /></button>\r\n        <div className=\"divider\"></div>\r\n        <button className=\"iconToggle\" onClick={() => setHasAlpha(!hasAlpha)} bottom-tooltip=\"Background\"><FaTint color=\"white\" size={17} style={{opacity:!hasAlpha?1:0.5}} /></button>\r\n        <input type=\"color\" onChange={setBackgroundColor} ref={colorInpRef} style={{backgroundColor: colorInpRef.current?.value}}></input>\r\n        <div className=\"divider\"></div>\r\n        <input type=\"number\" onChange={setCameraSize} ref={widthInpRef} />\r\n        <input type=\"number\" onChange={setCameraSize} ref={heightInpRef} />\r\n        <div className=\"divider\"></div>\r\n        <input type=\"range\" value={fov} min=\"10\" max=\"60\" step={1} onChange={(evt) => setFov(evt.target.value)} className=\"fovInp\" />\r\n        <button className=\"iconToggle\" onClick={() => setOrbitEnabled(!orbitEnabled)} bottom-tooltip=\"Orbit\"><FaCompass color=\"white\" size={17} style={{opacity:orbitEnabled?1:0.5}} /></button>\r\n      </div>\r\n\r\n      <button className=\"downloadBtn\" onClick={() => setDoDownload(true)}><FaCamera size={16} color=\"white\"/></button>\r\n\r\n      <div className=\"canvasContainer\">\r\n        <Suspense fallback={null}>\r\n          <Canvas colorManagement shadowMap shadows ref={canvasRef} gl={{ preserveDrawingBuffer: true }} >\r\n            <OrbitControls makeDefault enabled={orbitEnabled} />\r\n\r\n            <PerspectiveCamera makeDefault ref={cameraRef} fov={fov} near={0.0001} far={50} />\r\n\r\n            <MockupScene\r\n              groundShadows={groundShadows}\r\n              objectShadows={objectShadows}\r\n              doDownload={doDownload}\r\n              setDoDownload={setDoDownload}\r\n              width={widthInpRef.current ? widthInpRef.current.value : 0}\r\n              height={heightInpRef.current ? heightInpRef.current.value : 0}\r\n            />\r\n\r\n            {!hasAlpha && <color attach=\"background\" args={[color]} />}\r\n\r\n          </Canvas>\r\n        </Suspense>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Scene;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Scene from './components/scene/Scene';\n\nfunction App () {\n\n  return (\n    <div className=\"App\">\n      \n      <Scene />\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}